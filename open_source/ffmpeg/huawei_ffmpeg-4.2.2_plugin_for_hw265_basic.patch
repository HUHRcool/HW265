diff -urN ffmpeg-4.2.2/configure ffmpeg-4.2.2-hw265-basic/configure
--- ffmpeg-4.2.2/configure	2020-01-01 05:35:22.000000000 +0800
+++ ffmpeg-4.2.2-hw265-basic/configure	2020-09-21 21:26:13.336000000 +0800
@@ -282,6 +282,7 @@
   --enable-libwebp         enable WebP encoding via libwebp [no]
   --enable-libx264         enable H.264 encoding via x264 [no]
   --enable-libx265         enable HEVC encoding via x265 [no]
+  --enable-libhw265        enable HEVC encoding via hw265 [no]
   --enable-libxavs         enable AVS encoding via xavs [no]
   --enable-libxavs2        enable AVS2 encoding via xavs2 [no]
   --enable-libxcb          enable X11 grabbing using XCB [autodetect]
@@ -1812,6 +1813,7 @@
     opengl
     pocketsphinx
     vapoursynth
+    libhw265
 "
 
 HWACCEL_AUTODETECT_LIBRARY_LIST="
@@ -3210,6 +3212,7 @@
 libx264rgb_encoder_deps="libx264 x264_csp_bgr"
 libx264rgb_encoder_select="libx264_encoder"
 libx265_encoder_deps="libx265"
+libhw265_encoder_deps="libhw265"
 libxavs_encoder_deps="libxavs"
 libxavs2_encoder_deps="libxavs2"
 libxvid_encoder_deps="libxvid"
@@ -6310,6 +6313,7 @@
                              check_cpp_condition libx262 x264.h "X264_MPEG2"
 enabled libx265           && require_pkg_config libx265 x265 x265.h x265_api_get &&
                              require_cpp_condition libx265 x265.h "X265_BUILD >= 68"
+enabled libhw265          && require libhw265 "hwe_api.h" HWE_Process "-lhw265"
 enabled libxavs           && require libxavs "stdint.h xavs.h" xavs_encoder_encode "-lxavs $pthreads_extralibs $libm_extralibs"
 enabled libxavs2          && require_pkg_config libxavs2 "xavs2 >= 1.3.0" "stdint.h xavs2.h" xavs2_api_get
 enabled libxvid           && require libxvid xvid.h xvid_global -lxvidcore
diff -urN ffmpeg-4.2.2/libavcodec/allcodecs.c ffmpeg-4.2.2-hw265-basic/libavcodec/allcodecs.c
--- ffmpeg-4.2.2/libavcodec/allcodecs.c	2020-01-01 05:35:23.000000000 +0800
+++ ffmpeg-4.2.2-hw265-basic/libavcodec/allcodecs.c	2020-09-01 14:25:00.508000000 +0800
@@ -724,6 +724,7 @@
 extern AVCodec ff_libx264_encoder;
 extern AVCodec ff_libx264rgb_encoder;
 extern AVCodec ff_libx265_encoder;
+extern AVCodec ff_libhw265_encoder;
 extern AVCodec ff_libxavs_encoder;
 extern AVCodec ff_libxavs2_encoder;
 extern AVCodec ff_libxvid_encoder;
diff -urN ffmpeg-4.2.2/libavcodec/libhw265.c ffmpeg-4.2.2-hw265-basic/libavcodec/libhw265.c
--- ffmpeg-4.2.2/libavcodec/libhw265.c	1970-01-01 08:00:00.000000000 +0800
+++ ffmpeg-4.2.2-hw265-basic/libavcodec/libhw265.c	2020-09-28 14:06:26.012000000 +0800
@@ -0,0 +1,356 @@
+/*
+ * HW265 encoder library plugin for FFmpeg
+ *
+ * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include "hwe_api.h"
+#include <string.h>
+#include <float.h>
+#include <pthread.h>
+#include "libavutil/internal.h"
+#include "libavutil/common.h"
+#include "libavutil/opt.h"
+#include "libavutil/pixdesc.h"
+#include "avcodec.h"
+#include "internal.h"
+
+#define PKT_BUF_DEEP 10 // buffer size is 2^PKT_BUF_DEEP
+#define MAX_PKT_BUF_SIZE (1 << PKT_BUF_DEEP)
+#define PKT_QUE_MASK (MAX_PKT_BUF_SIZE - 1)
+
+typedef struct libhw265Context {
+    const AVClass *class;
+    HWE_CreateParams creat_params;
+    HWE_Input input;
+    HWE_Handle enc_handle;
+    AVCodecContext *p_out_handle;
+
+    int channel_ID;
+    int log_level;
+    int init_qp;
+    int frame_thread_num;
+    int wpp_thread_num;
+    int profile;
+    int quality_set;
+    int is_send_end;
+    int is_encode_end;
+
+    int64_t pts_buffer[MAX_PKT_BUF_SIZE];
+    volatile unsigned int pts_write_index;
+    volatile unsigned int pts_read_index;
+    pthread_mutex_t pts_buf_mutex;
+    unsigned int pts_queue_mask;
+
+    AVPacket *pkt_buffer[MAX_PKT_BUF_SIZE];
+    volatile unsigned int pkt_write_index;
+    volatile unsigned int pkt_read_index;
+    unsigned int pkt_queue_mask;
+    pthread_mutex_t pkt_buf_mutex;
+} libhw265Context;
+
+static int libhw265_receive_packet(AVCodecContext *avctx, AVPacket *pkt)
+{
+    libhw265Context *ctx = avctx->priv_data;
+    while (ctx->pkt_read_index == ctx->pkt_write_index) {
+        if (!ctx->is_send_end || (ctx->is_send_end && ctx->is_encode_end)) {
+            return AVERROR(EAGAIN);
+        }
+        usleep(10); // sleep 10 us
+    }
+    *pkt = *(ctx->pkt_buffer[ctx->pkt_read_index & ctx->pkt_queue_mask]);
+    av_freep(&(ctx->pkt_buffer[ctx->pkt_read_index & ctx->pkt_queue_mask]));
+    pthread_mutex_lock(&ctx->pkt_buf_mutex);
+    ctx->pkt_read_index++;
+    pthread_mutex_unlock(&ctx->pkt_buf_mutex);
+    return 0;
+}
+
+static enum AVPictureType set_pict_type(enum HWE_FrameType frameType)
+{
+    enum AVPictureType result;
+    switch (frameType) {
+        case HWE_FRAME_TYPE_P:
+            result = AV_PICTURE_TYPE_P;
+            break;
+        case HWE_FRAME_TYPE_B:
+            result = AV_PICTURE_TYPE_B;
+            break;
+        default:
+            result = AV_PICTURE_TYPE_I;
+            break;
+    }
+    return result;
+}
+
+static HWE_ReturnVal libhw265_encode_done(unsigned int channel_ID, void *outHandle, HWE_Output *outputData)
+{
+    libhw265Context *ctx = (libhw265Context *)outHandle;
+    AVCodecContext *avctx = ctx->p_out_handle;
+    int ret;
+    int payload;
+    AVPacket *pkt = NULL;
+    if (!outputData->outData.dataAddr || outputData->outData.dataLen <= 0) {
+        ctx->is_encode_end = 1;
+        return HWE_RET_OK;
+    }
+    pkt = av_packet_alloc();
+    if (!pkt) {
+        av_log(avctx, AV_LOG_ERROR, "Error alloc pkt failed.\n");
+        av_packet_free(&pkt);
+        return HWE_RET_FAILED;
+    }
+    av_init_packet(pkt);
+    payload = outputData->outData.dataLen;
+    ret = av_new_packet(pkt, payload);
+    if (ret < 0) {
+        av_log(avctx, AV_LOG_ERROR, "Error new pkt failed.\n");
+        av_packet_free(&pkt);
+        return HWE_RET_FAILED;
+    }
+    memcpy(pkt->data, outputData->outData.dataAddr, payload);
+    if (ctx->pts_write_index != ctx->pts_read_index) {
+        pthread_mutex_lock(&ctx->pts_buf_mutex);
+        pkt->pts = ctx->pts_buffer[ctx->pts_read_index & ctx->pts_queue_mask];
+        ctx->pts_read_index++;
+        pthread_mutex_unlock(&ctx->pts_buf_mutex);
+    }
+    pkt->dts = pkt->pts;
+    avctx->coded_frame->pict_type = set_pict_type(outputData->outFrameInfo.frameType);
+    if (outputData->outFrameInfo.frameType == HWE_FRAME_TYPE_B) {
+        pkt->flags |= AV_PKT_FLAG_KEY;
+    } else {
+        pkt->flags |= 0;
+    }
+    pthread_mutex_lock(&ctx->pkt_buf_mutex);
+    if (ctx->pkt_write_index - ctx->pkt_read_index < MAX_PKT_BUF_SIZE) {
+        ctx->pkt_buffer[ctx->pkt_write_index & ctx->pkt_queue_mask] = pkt;
+        ctx->pkt_write_index++;
+        pthread_mutex_unlock(&ctx->pkt_buf_mutex);
+    } else {
+        pthread_mutex_unlock(&ctx->pkt_buf_mutex);
+        av_log(avctx, AV_LOG_ERROR, "hw265 pkt buf is full pkt_buffer, Write index = %d, Read index = %d\n",
+            ctx->pkt_write_index, ctx->pkt_read_index);
+        av_packet_free(&pkt);
+    }
+    return HWE_RET_OK;
+}
+
+static av_cold int libhw265_encode_close(AVCodecContext *avctx)
+{
+    libhw265Context *ctx;
+    if (!avctx) {
+        return AVERROR(EINVAL);
+    }
+    ctx = avctx->priv_data;
+    if (ctx->is_encode_end) {
+        return 0;
+    }
+    if (HWE_Flush(ctx->enc_handle) != HWE_RET_OK) {
+        av_log(avctx, AV_LOG_ERROR, "ERROR: HWE_Flush failed.\n");
+        return AVERROR(EINVAL);
+    }
+    if (HWE_Delete(ctx->enc_handle) != HWE_RET_OK) {
+        av_log(avctx, AV_LOG_ERROR, "ERROR: HWE_Delete failed.\n");
+        return AVERROR(EINVAL);
+    }
+    return 0;
+}
+
+static int set_default_value(AVCodecContext *avctx)
+{
+    libhw265Context *ctx = avctx->priv_data;
+    ctx->p_out_handle = avctx;
+    ctx->pkt_queue_mask = PKT_QUE_MASK;
+    ctx->pkt_read_index = 0;
+    ctx->pkt_write_index = 0;
+    ctx->pts_queue_mask = PKT_QUE_MASK;
+    ctx->pts_read_index = 0;
+    ctx->pts_write_index = 0;
+    ctx->is_send_end = 0;
+    ctx->is_encode_end = 0;
+    memset(&ctx->input, 0, sizeof(HWE_Input));
+    ctx->enc_handle = NULL;
+    if (HWE_ParamDefault(&ctx->creat_params) != HWE_RET_OK) {
+        av_log(avctx, AV_LOG_ERROR, "ERROR: HWE_ParamDefault failed.\n");
+        if (libhw265_encode_close(avctx) != 0) {
+            av_log(avctx, AV_LOG_ERROR, "ERROR: libhw265_encode_close failed.\n");
+        }
+        return HWE_RET_FAILED;
+    }
+    return HWE_RET_OK;
+}
+
+static void set_ffmpeg_value(AVCodecContext *avctx)
+{
+    libhw265Context *ctx = avctx->priv_data;
+    ctx->creat_params.picWidth = avctx->width;
+    ctx->creat_params.picHeight = avctx->height;
+    if (avctx->framerate.num > 0 && avctx->framerate.den > 0) {
+        ctx->creat_params.fpsNum = avctx->framerate.num;
+        ctx->creat_params.fpsDen = avctx->framerate.den;
+    } else {
+        ctx->creat_params.fpsNum = avctx->time_base.den;
+        ctx->creat_params.fpsDen = avctx->time_base.num * avctx->ticks_per_frame;
+    }
+    if (avctx->gop_size > 0) {
+        ctx->creat_params.h265eCodecParam.intraPeriod = avctx->gop_size;
+    }
+    ctx->creat_params.pixelFormat = avctx->pix_fmt;
+    return;
+}
+
+static void set_input_value(AVCodecContext *avctx)
+{
+    libhw265Context *ctx = avctx->priv_data;
+    ctx->creat_params.channelID = (ctx->channel_ID >= 0) ? ctx->channel_ID : ctx->creat_params.channelID;
+    ctx->creat_params.logLevel = (ctx->log_level >= 0) ? ctx->log_level : ctx->creat_params.logLevel;
+    ctx->creat_params.h265eCodecParam.frameThreadNum =
+        (ctx->frame_thread_num >= 0) ? ctx->frame_thread_num : ctx->creat_params.h265eCodecParam.frameThreadNum;
+    ctx->creat_params.h265eCodecParam.wppThreadNum =
+        (ctx->wpp_thread_num >= 0) ? ctx->wpp_thread_num : ctx->creat_params.h265eCodecParam.wppThreadNum;
+    ctx->creat_params.h265eCodecParam.profile =
+        (ctx->profile >= 0) ? ctx->profile : ctx->creat_params.h265eCodecParam.profile;
+    ctx->creat_params.h265eCodecParam.qualitySet =
+        (ctx->quality_set >= 0) ? ctx->quality_set : ctx->creat_params.h265eCodecParam.qualitySet;
+    if (ctx->init_qp >= 0) {
+        ctx->creat_params.rcParam.initQP = ctx->init_qp;
+        ctx->creat_params.rcParam.rcMode = HWE_RC_CQP;
+    }
+    return;
+}
+
+static av_cold int libhw265_encode_init(AVCodecContext *avctx)
+{
+    libhw265Context *ctx;
+    HWE_Output outputData;
+    int ret;
+
+    if (!avctx) {
+        return AVERROR_INVALIDDATA;
+    }
+    ctx = avctx->priv_data;
+    if (set_default_value(avctx) == HWE_RET_FAILED) {
+        return AVERROR_INVALIDDATA;
+    }
+    set_ffmpeg_value(avctx);
+    set_input_value(avctx);
+    ret = HWE_Create(&ctx->enc_handle, &ctx->creat_params);
+    if (ret != HWE_RET_OK) {
+        av_log(avctx, AV_LOG_ERROR, "ERROR: HWE_Create failed.\n");
+        return AVERROR(EINVAL);
+    }
+    if (HWE_RegisterEncodeDoneCallback(ctx->enc_handle, (const void *)ctx, libhw265_encode_done) != HWE_RET_OK) {
+        av_log(avctx, AV_LOG_ERROR, "ERROR: HWE_RegisterEncodeDoneCallback failed.\n");
+        return libhw265_encode_close(avctx);
+    }
+    ret = HWE_GetHeader(ctx->enc_handle, &outputData);
+    if (ret != HWE_RET_OK) {
+        av_log(avctx, AV_LOG_ERROR, "Cannot encode headers.\n");
+        return libhw265_encode_close(avctx);
+    }
+    avctx->extradata_size = outputData.outData.dataLen;
+    avctx->extradata = av_malloc(avctx->extradata_size + AV_INPUT_BUFFER_PADDING_SIZE);
+    if (NULL == avctx->extradata) {
+        av_log(avctx, AV_LOG_ERROR, "Cannot allocate HEVC header of size %d.\n", avctx->extradata_size);
+        return libhw265_encode_close(avctx);
+    }
+    memcpy(avctx->extradata, outputData.outData.dataAddr, avctx->extradata_size);
+    return 0;
+}
+
+static int libhw265_encode_frame(AVCodecContext *avctx, AVPacket *pkt, const AVFrame *pic, int *gotPacket)
+{
+    libhw265Context *ctx;
+    if (!avctx || !gotPacket) {
+        return AVERROR_INVALIDDATA;
+    }
+    ctx = avctx->priv_data;
+    if (pic) {
+        if (ctx->pts_write_index - ctx->pts_read_index < MAX_PKT_BUF_SIZE) {
+            pthread_mutex_lock(&ctx->pts_buf_mutex);
+            ctx->pts_buffer[ctx->pts_write_index & ctx->pts_queue_mask] = pic->pts;
+            ctx->pts_write_index++;
+            pthread_mutex_unlock(&ctx->pts_buf_mutex);
+        }
+        for (int i = 0; i < HWE_MAX_PLANE; ++i) {
+            ctx->input.inData.pixel[i] = pic->data[i];
+            ctx->input.inData.stride[i] = pic->linesize[i];
+            ctx->input.inData.pixelSize[i] = pic->linesize[i] * pic->height;
+        }
+        ctx->input.inFrameInfo.pts = pic->pts;
+        ctx->input.inFrameInfo.frameType = HWE_FRAME_TYPE_INVALID;
+        if (HWE_Process(ctx->enc_handle, &ctx->input) != HWE_RET_OK) {
+            av_log(avctx, AV_LOG_ERROR, "ERROR: HWE_Process failed.\n");
+            return libhw265_encode_close(avctx);
+        }
+    } else {
+        if (!ctx->is_send_end) {
+            ctx->is_send_end = 1;
+            libhw265_encode_close(avctx);
+            ctx->is_encode_end = 1;
+        }
+    }
+    if (libhw265_receive_packet(avctx, pkt) != AVERROR(EAGAIN)) {
+        *gotPacket = 1; // not end
+    } else {
+        *gotPacket = 0; // send end
+    }
+    return 0;
+}
+
+#define OFFSET(x) offsetof(libhw265Context, x)
+#define VE AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM
+
+static const AVOption OPTIONS[] = {
+    {"channel",       "Channel ID for encoder[0, 65535], default 0",                             OFFSET(channel_ID),       AV_OPT_TYPE_INT, {.i64 =  -1}, -1, INT_MAX, VE},
+    {"log_level",     "Log level. 0:off 1:error 2:warning 3:info 4:debug, default 1",            OFFSET(log_level),        AV_OPT_TYPE_INT, {.i64 =  -1}, -1,       4, VE},
+    {"qp",            "The initial qp used by encoder[0, 51], default 18",                       OFFSET(init_qp),          AV_OPT_TYPE_INT, {.i64 =  -1}, -1,      51, VE},
+    {"frame_threads", "Number of concurrently encoded frame threads[1, 38], default 12",         OFFSET(frame_thread_num), AV_OPT_TYPE_INT, {.i64 =  -1}, -1,      38, VE},
+    {"wpp_threads",   "Number of concurrently encoded rows threads[1, 20], default 8",           OFFSET(wpp_thread_num),   AV_OPT_TYPE_INT, {.i64 =  -1}, -1,      20, VE},
+    {"profile",       "Only support main profile. default 0",                                    OFFSET(profile),          AV_OPT_TYPE_INT, {.i64 =  -1}, -1, INT_MAX, VE},
+    {"qualityset",    "Quality level of the encoder. {2, 3, 5, 6} from slow to fast, default 3", OFFSET(quality_set),      AV_OPT_TYPE_INT, {.i64 =  -1}, -1,       6, VE},
+    {NULL}
+};
+
+static const AVClass class = {
+    .class_name = "libhw265",
+    .item_name = av_default_item_name,
+    .option = OPTIONS,
+    .version = LIBAVUTIL_VERSION_INT,
+};
+
+static const AVCodecDefault hw265_defaults[] = {
+    { NULL },
+};
+
+AVCodec ff_libhw265_encoder = {
+    .name = "libhw265",
+    .long_name = NULL_IF_CONFIG_SMALL("libhw265 HW.265 / HEVC"),
+    .type = AVMEDIA_TYPE_VIDEO,
+    .id = AV_CODEC_ID_HEVC,
+    .init = libhw265_encode_init,
+    .encode2 = libhw265_encode_frame,
+    .close = libhw265_encode_close,
+    .priv_data_size = sizeof(libhw265Context),
+    .priv_class = &class,
+    .defaults = hw265_defaults,
+    .capabilities = AV_CODEC_CAP_DELAY | AV_CODEC_CAP_AUTO_THREADS,
+    .wrapper_name = "libhw265",
+};
diff -urN ffmpeg-4.2.2/libavcodec/Makefile ffmpeg-4.2.2-hw265-basic/libavcodec/Makefile
--- ffmpeg-4.2.2/libavcodec/Makefile	2020-01-01 05:35:22.000000000 +0800
+++ ffmpeg-4.2.2-hw265-basic/libavcodec/Makefile	2020-09-01 14:25:00.520000000 +0800
@@ -1007,6 +1007,7 @@
 OBJS-$(CONFIG_LIBX262_ENCODER)            += libx264.o
 OBJS-$(CONFIG_LIBX264_ENCODER)            += libx264.o
 OBJS-$(CONFIG_LIBX265_ENCODER)            += libx265.o
+OBJS-$(CONFIG_LIBHW265_ENCODER)           += libhw265.o
 OBJS-$(CONFIG_LIBXAVS_ENCODER)            += libxavs.o
 OBJS-$(CONFIG_LIBXAVS2_ENCODER)           += libxavs2.o
 OBJS-$(CONFIG_LIBXVID_ENCODER)            += libxvid.o
